/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import { FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase } from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UniswapV2ERC20__factory>;
    getContractFactory(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UniswapV2Pair__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "UniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UniswapV2Router02__factory>;
    getContractFactory(
      name: "CustomRouterV3",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CustomRouterV3__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UniswapV2Factory__factory>;
    getContractFactory(
      name: "UniswapV2LibraryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UniswapV2LibraryMock__factory>;
    getContractFactory(
      name: "UniswapV2PairC",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UniswapV2PairC__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "Zapper",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Zapper__factory>;

    getContractAt(name: "ERC20", address: string, signer?: ethers.Signer): Promise<Contracts.ERC20>;
    getContractAt(name: "IERC20Metadata", address: string, signer?: ethers.Signer): Promise<Contracts.IERC20Metadata>;
    getContractAt(name: "IERC20", address: string, signer?: ethers.Signer): Promise<Contracts.IERC20>;
    getContractAt(name: "IERC20", address: string, signer?: ethers.Signer): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Callee",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(name: "IUniswapV2ERC20", address: string, signer?: ethers.Signer): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(name: "IUniswapV2Pair", address: string, signer?: ethers.Signer): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(name: "UniswapV2ERC20", address: string, signer?: ethers.Signer): Promise<Contracts.UniswapV2ERC20>;
    getContractAt(name: "UniswapV2Pair", address: string, signer?: ethers.Signer): Promise<Contracts.UniswapV2Pair>;
    getContractAt(name: "IERC20", address: string, signer?: ethers.Signer): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(name: "IWETH", address: string, signer?: ethers.Signer): Promise<Contracts.IWETH>;
    getContractAt(
      name: "UniswapV2Router02",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.UniswapV2Router02>;
    getContractAt(name: "CustomRouterV3", address: string, signer?: ethers.Signer): Promise<Contracts.CustomRouterV3>;
    getContractAt(name: "Token", address: string, signer?: ethers.Signer): Promise<Contracts.Token>;
    getContractAt(
      name: "UniswapV2Factory",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.UniswapV2Factory>;
    getContractAt(
      name: "UniswapV2LibraryMock",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.UniswapV2LibraryMock>;
    getContractAt(name: "UniswapV2PairC", address: string, signer?: ethers.Signer): Promise<Contracts.UniswapV2PairC>;
    getContractAt(name: "WETH9", address: string, signer?: ethers.Signer): Promise<Contracts.WETH9>;
    getContractAt(name: "Zapper", address: string, signer?: ethers.Signer): Promise<Contracts.Zapper>;

    // default types
    getContractFactory(name: string, signerOrOptions?: ethers.Signer | FactoryOptions): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer,
    ): Promise<ethers.ContractFactory>;
    getContractAt(nameOrAbi: string | any[], address: string, signer?: ethers.Signer): Promise<ethers.Contract>;
  }
}
