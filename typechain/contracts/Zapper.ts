/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../common";

export interface ZapperInterface extends utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "router()": FunctionFragment;
    "zapEth(address)": FunctionFragment;
    "zapEthToTokens(address)": FunctionFragment;
    "zapToken(address,address,uint256)": FunctionFragment;
    "zapTokenForTokens(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "WETH" | "router" | "zapEth" | "zapEthToTokens" | "zapToken" | "zapTokenForTokens",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "zapEth", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "zapEthToTokens", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "zapToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "zapTokenForTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapEthToTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapTokenForTokens", data: BytesLike): Result;

  events: {
    "Zap(uint256)": EventFragment;
    "ZapETH(uint256)": EventFragment;
    "ZapETHToTokens(uint256)": EventFragment;
    "ZapTokenToTokens(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Zap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZapETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZapETHToTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZapTokenToTokens"): EventFragment;
}

export interface ZapEventObject {
  arg0: BigNumber;
}
export type ZapEvent = TypedEvent<[BigNumber], ZapEventObject>;

export type ZapEventFilter = TypedEventFilter<ZapEvent>;

export interface ZapETHEventObject {
  arg0: BigNumber;
}
export type ZapETHEvent = TypedEvent<[BigNumber], ZapETHEventObject>;

export type ZapETHEventFilter = TypedEventFilter<ZapETHEvent>;

export interface ZapETHToTokensEventObject {
  arg0: BigNumber;
}
export type ZapETHToTokensEvent = TypedEvent<[BigNumber], ZapETHToTokensEventObject>;

export type ZapETHToTokensEventFilter = TypedEventFilter<ZapETHToTokensEvent>;

export interface ZapTokenToTokensEventObject {
  arg0: BigNumber;
}
export type ZapTokenToTokensEvent = TypedEvent<[BigNumber], ZapTokenToTokensEventObject>;

export type ZapTokenToTokensEventFilter = TypedEventFilter<ZapTokenToTokensEvent>;

export interface Zapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    zapEth(
      pair: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    zapEthToTokens(
      pair: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    zapToken(
      token: PromiseOrValue<string>,
      pair: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    zapTokenForTokens(
      token: PromiseOrValue<string>,
      pair: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  zapEth(
    pair: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  zapEthToTokens(
    pair: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  zapToken(
    token: PromiseOrValue<string>,
    pair: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  zapTokenForTokens(
    token: PromiseOrValue<string>,
    pair: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    zapEth(pair: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    zapEthToTokens(pair: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    zapToken(
      token: PromiseOrValue<string>,
      pair: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    zapTokenForTokens(
      token: PromiseOrValue<string>,
      pair: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    "Zap(uint256)"(arg0?: null): ZapEventFilter;
    Zap(arg0?: null): ZapEventFilter;

    "ZapETH(uint256)"(arg0?: null): ZapETHEventFilter;
    ZapETH(arg0?: null): ZapETHEventFilter;

    "ZapETHToTokens(uint256)"(arg0?: null): ZapETHToTokensEventFilter;
    ZapETHToTokens(arg0?: null): ZapETHToTokensEventFilter;

    "ZapTokenToTokens(uint256)"(arg0?: null): ZapTokenToTokensEventFilter;
    ZapTokenToTokens(arg0?: null): ZapTokenToTokensEventFilter;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    zapEth(
      pair: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    zapEthToTokens(
      pair: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    zapToken(
      token: PromiseOrValue<string>,
      pair: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    zapTokenForTokens(
      token: PromiseOrValue<string>,
      pair: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zapEth(
      pair: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    zapEthToTokens(
      pair: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    zapToken(
      token: PromiseOrValue<string>,
      pair: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    zapTokenForTokens(
      token: PromiseOrValue<string>,
      pair: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
